/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define LYDEF 0
#define LYSYM 1
#define LYNAV 2
#define LYFUN 3

&mt {
    // flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <23>;
};

/ {
    macros {
        win_tab: win_tab {
            label = "win_tab";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LWIN>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LWIN>
                ;
        };

        ly_def: ly_def {
            label = "ly_def";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to LYDEF>
                , <&rgb_ug RGB_COLOR_HSB(200,40,50)>
                ;
        };

        ly_sym: ly_sym {
            label = "ly_sym";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to LYSYM>
                , <&rgb_ug RGB_COLOR_HSB(50,100,50)>
                ;
        };

        ly_nav: ly_nav {
            label = "ly_nav";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to LYNAV>
                , <&rgb_ug RGB_COLOR_HSB(270,100,50)>
                ;
        };
    };

    behaviours {
        mo_sl: behaviour_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_sl";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };

        mo_to: behaviour_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        kp_sk: behaviour_kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "kp_sk";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
        };

        dlrpnd: dollar_pound {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_POUND";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp POUND>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        eqprcnt: equals_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        grvlngl: grave_left_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_LEFT_ANGLE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        tldrngl: tilde_right_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_RIGHT_ANGLE";
            #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        cmmaqst: comma_question_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION_MARK";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        dotexcl: dot_exclamation_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCLAMATION_MARK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        hshat: hash_at {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_AT";
            #binding-cells = <0>;
            bindings = <&kp NUHS>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        mnspls: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        atrkcrt: asterisk_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "ASTERISK_CARET";
            #binding-cells = <0>;
            bindings = <&kp ASTRK>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        flshbslh: forward_slash_back_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_SLASH_BACK_SLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        amppipe: ampersand_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_PIPE";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf0: nf0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF0";
            #binding-cells = <0>;
            bindings = <&kp NUM_0>, <&kp F10>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf1: nf1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF1";
            #binding-cells = <0>;
            bindings = <&kp NUM_1>, <&kp F1>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf2: nf2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF2";
            #binding-cells = <0>;
            bindings = <&kp NUM_2>, <&kp F2>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf3: nf3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF3";
            #binding-cells = <0>;
            bindings = <&kp NUM_3>, <&kp F3>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf4: nf4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF4";
            #binding-cells = <0>;
            bindings = <&kp NUM_4>, <&kp F4>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf5: nf5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF5";
            #binding-cells = <0>;
            bindings = <&kp NUM_5>, <&kp F5>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };
    
        nf6: nf6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF6";
            #binding-cells = <0>;
            bindings = <&kp NUM_6>, <&kp F6>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf7: nf7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF7";
            #binding-cells = <0>;
            bindings = <&kp NUM_7>, <&kp F7>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf8: nf8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF8";
            #binding-cells = <0>;
            bindings = <&kp NUM_8>, <&kp F8>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf9: nf9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF9";
            #binding-cells = <0>;
            bindings = <&kp NUM_9>, <&kp F9>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        kp_kp: kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "kp_kp";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

//        combo_tab {
//            timeout-ms = <16>;
//            key-positions = <2 3>;
//            bindings = <&kp TAB>;
//        };

        combo_tab {
            timeout-ms = <16>;
            key-positions = <12 13>;
            bindings = <&kp TAB>;
        };

        combo_backspace {
            timeout-ms = <16>;
            key-positions = <16 17>;
            bindings = <&kp BKSP>;
        };

        combo_return {
            timeout-ms = <16>;
            key-positions = <17 18>;
            bindings = <&kp RET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

// LYDEF
// [   Q   ] [   W   ] [   F   ] [   P   esc   B   ]    [   J   bsp   L   ] [   U   ] [   Y   ] [   Z   ]
// [   A   ] [   R   ] [   S   ] [   T   tab   G   ]    [   M   ret   N   ] [   E   ] [   I   ] [   O   ]
// [   _   ] [   X   ] [   C   ] [   D   ] [   V   ]    [   K   ] [   H   ] [  , ?  ] [  . !  ] [  ; :  ]
//                               [ LYSYM ] [ space ]    [ shift ] [ LYNAV ]
//                                            ctrl        shift

        default_layer {
            bindings = <
            &kp Q      &kp W  &kp F  &kp P    &kp B            &kp J                 &kp L    &kp U     &kp Y     &kp Z
            &kp A      &kp R  &kp S  &kp T    &kp G            &kp M                 &kp N    &kp E     &kp I     &kp O
            &kp UNDER  &kp X  &kp C  &kp D    &kp V            &kp K                 &kp H    &cmmaqst  &dotexcl  &kp SCLN
                                     &ly_sym  &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &ly_nav
            >;
        };

// LYSYM
// [   5   ] [   6   ] [   7   ] [   8   ] [   9   ]    [   0   ] [   1   ] [   2   ] [   3   ] [   4   ]
// [  & |  ] [  = %  ] [  ' "  ] [   (   ] [   ]   ]    [   )   ] [   [   ] [  ` <  ] [  ~ >  ] [  / \  ]
// [   _   ] [  $ Â£  ] [  - +  ] [   {   ] [  * ^  ]    [   }   ] [  # @  ] [  , ?  ] [  . !  ] [  ; :  ]
//                               [ LYDEF ] [ space ]    [ shift ] [ LYNAV ]
//                                            ctrl        shift

        symbol_layer {
            bindings = <
            &nf5       &nf6      &nf7      &nf8      &nf9             &nf0                  &nf1                &nf2      &nf3      &nf4
            &amppipe   &eqprcnt  &kp APOS  &kp LPAR  &kp RBKT         &kp RPAR              &kp LBKT            &grvlngl  &tldrngl  &flshbslh
            &kp UNDER  &dlrpnd   &mnspls   &kp LBRC  &atrkcrt         &kp RBRC              &hshat              &cmmaqst  &dotexcl  &kp SCLN
                                           &ly_def   &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &ly_nav
            >;
        };

// copy+paste+cut no work
// back no work
// undo no work?

// TODO:
// * Alt+tab
// * notes, music, task manager
// * forward
// * play/pause, volume-up/down, record
// * K_SCROLL_UP K_SCROLL_DOWN
// * K_NEXT, K_PREV, K_SELECT
// LYNAV
// [  msg  ] [  code ] [ trmnl ] [ brwsr ] [  cut  ]    [  pgup ] [  home ] [   up  ] [  end  ] [ prscn ]
// [  esc  ] [  tab  ] [ bkspc ] [ enter ] [  copy ]    [ pgdwn ] [  left ] [  down ] [ right ] [  del  ]
// [  alt  ] [ LYFUN ] [  bck  ] [ wn+tb ] [ paste ]    [       ] [  undo ] [       ] [  redo ] [  lck  ]
//                               [ LYSYM ] [ space ]    [ shift ] [ LYDEF ]
//                                            ctrl        shift

        navigation_layer {
            bindings = <
            &kp C_AL_IM  &kp C_AL_TEXT_EDITOR  &kp C_AL_CONTROL_PANEL  &kp K_WWW  &kp K_CUT        &kp PG_UP             &kp HOME    &kp UP     &kp END     &kp PSCRN
            &kp ESC      &kp TAB               &kp BKSP                &kp ENTER  &kp K_COPY       &kp PG_DN             &kp LEFT    &kp DOWN   &kp RIGHT   &kp DEL
            &kp LALT     &to LYFUN             &kp K_BACK              &win_tab   &kp K_PASTE      &trans                &kp K_UNDO  &trans     &kp K_REDO  &kp K_LOCK
                                                                       &ly_sym    &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &ly_def
            >;
        };

// LYFUN
// TODO: M (map)
// [ esctb ] [   Q   ] [   W   ] [   E   ] [   R   ]    [   Y   ] [   U   ] [   I   ] [   O   ] [   P   ]
// [ shift ] [   A   ] [   S   ] [   D   ] [   F   ]    [   G   ] [   H   ] [   J   ] [   K   ] [   L   ]
// [  ctrl ] [   Z   ] [   X   ] [   C   ] [   V   ]    [   B   ] [   N   ] [   M   ] [  , ?  ] [  . !  ]
//                               [   T   ] [ space ]    [       ] [ LYDEF ]
//                                   V       space
        fun_layer {
            bindings = <
            &kp_kp TAB ESC  &kp Q   &kp W   &kp E       &kp R      &kp Y   &kp U    &kp I  &kp O     &kp P
            &kp LSHIFT      &kp A   &kp S   &kp D       &kp F      &kp G   &kp H    &kp J  &kp K     &kp L
            &kp LCTRL       &kp Z   &kp X   &kp C       &kp V      &kp B   &kp N    &kp M  &cmmaqst  &dotexcl
                                            &kp_kp V T  &kp SPC    &trans  &ly_def
            >;
        };
    };
};
