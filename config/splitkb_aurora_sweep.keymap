/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/rgb.h>

#define LYDEF 0
#define LYSYM 1
#define LYNAV 2
#define LYFUN 3

&mt {
    // flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <23>;
};

/ {
    behaviours {
        mo_sl: behaviour_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_sl";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };

        mo_to: behaviour_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_to";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        kp_sk: behaviour_kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "kp_sk";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
        };

        dlrpnd: dollar_pound {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_POUND";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp POUND>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        eqprcnt: equals_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        grvlngl: grave_left_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_LEFT_ANGLE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        tldrngl: tilde_right_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_RIGHT_ANGLE";
            #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        cmmaqst: comma_question_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION_MARK";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        dotexcl: dot_exclamation_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCLAMATION_MARK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        hshat: hash_at {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_AT";
            #binding-cells = <0>;
            bindings = <&kp NUHS>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        mnspls: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        atrkcrt: asterisk_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "ASTERISK_CARET";
            #binding-cells = <0>;
            bindings = <&kp ASTRK>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        flshbslh: forward_slash_back_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "FORWARD_SLASH_BACK_SLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        amppipe: ampersand_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_PIPE";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf0: nf0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF0";
            #binding-cells = <0>;
            bindings = <&kp NUM_0>, <&kp F10>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf1: nf1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF1";
            #binding-cells = <0>;
            bindings = <&kp NUM_1>, <&kp F1>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf2: nf2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF2";
            #binding-cells = <0>;
            bindings = <&kp NUM_2>, <&kp F2>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf3: nf3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF3";
            #binding-cells = <0>;
            bindings = <&kp NUM_3>, <&kp F3>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf4: nf4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF4";
            #binding-cells = <0>;
            bindings = <&kp NUM_4>, <&kp F4>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf5: nf5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF5";
            #binding-cells = <0>;
            bindings = <&kp NUM_5>, <&kp F5>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };
    
        nf6: nf6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF6";
            #binding-cells = <0>;
            bindings = <&kp NUM_6>, <&kp F6>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf7: nf7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF7";
            #binding-cells = <0>;
            bindings = <&kp NUM_7>, <&kp F7>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf8: nf8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF8";
            #binding-cells = <0>;
            bindings = <&kp NUM_8>, <&kp F8>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        nf9: nf9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NF9";
            #binding-cells = <0>;
            bindings = <&kp NUM_9>, <&kp F9>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        esctb: escape_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "escape_tab";
            #binding-cells = <0>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp TAB>, <&kp ESC>;
        };

        vt: vt {
            compatible = "zmk,behavior-hold-tap";
            label = "vt";
            #binding-cells = <0>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            bindings = <&kp V>, <&kp T>;
        };
    };

    combos {
        compatible = "zmk,combos";

//        combo_escape {
//            timeout-ms = <20>;
//            key-positions = <3 4>;
//            bindings = <&kp ESC>;
//        };
//
//        combo_backspace {
//            timeout-ms = <20>;
//            key-positions = <5 6>;
//            bindings = <&kp BKSP>;
//        };
//
//        combo_tab {
//            timeout-ms = <20>;
//            key-positions = <13 14>;
//            bindings = <&kp TAB>;
//        };
//
//        combo_return {
//            timeout-ms = <20>;
//            key-positions = <15 16>;
//            bindings = <&kp RET>;
//        };
    };

    keymap {
        compatible = "zmk,keymap";

// LYDEF
// [   Q   ] [   W   ] [   F   ] [   P   esc   B   ]    [   J   bsp   L   ] [   U   ] [   Y   ] [   Z   ]
// [   A   ] [   R   ] [   S   ] [   T   tab   G   ]    [   M   ret   N   ] [   E   ] [   I   ] [   O   ]
// [   _   ] [   X   ] [   C   ] [   D   ] [   V   ]    [   K   ] [   H   ] [  , ?  ] [  . !  ] [  ; :  ]
//                               [ LYSYM ] [ space ]    [ shift ] [ LYNAV ]
//                                            ctrl        shift

        default_layer {
            bindings = <
            &kp Q      &kp W  &kp F  &kp P               &kp B            &kp J                 &kp L               &kp U     &kp Y     &kp Z
            &kp A      &kp R  &kp S  &kp T               &kp G            &kp M                 &kp N               &kp E     &kp I     &kp O
            &kp UNDER  &kp X  &kp C  &kp D               &kp V            &kp K                 &kp H               &cmmaqst  &dotexcl  &kp SCLN
                                     &mo_to LYSYM LYSYM  &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &mo_sl LYNAV LYNAV
            >;
        };

// LYSYM
// [   5   ] [   6   ] [   7   ] [   8   ] [   9   ]    [   0   ] [   1   ] [   2   ] [   3   ] [   4   ]
// [  & |  ] [  = %  ] [  ' "  ] [   (   ] [   )   ]    [   ]   ] [   [   ] [  ` <  ] [  ~ >  ] [  / \  ]
// [   _   ] [  $ Â£  ] [  - +  ] [   {   ] [   }   ]    [  * ^  ] [  # @  ] [  , ?  ] [  . !  ] [  ; :  ]
//                               [ LYDEF ] [ space ]    [ shift ] [ LYNAV ]
//                                            ctrl        shift

        symbol_layer {
            bindings = <
            &nf5       &nf6      &nf7      &nf8       &nf9             &nf0                  &nf1                &nf2      &nf3      &nf4
            &amppipe   &eqprcnt  &kp APOS  &kp LPAR   &kp RPAR         &kp RBKT              &kp LBKT            &grvlngl  &tldrngl  &flshbslh
            &kp UNDER  &dlrpnd   &mnspls   &kp LBRC   &kp RBRC         &atrkcrt              &hshat              &cmmaqst  &dotexcl  &kp SCLN
                                           &to LYDEF  &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &mo_sl LYNAV LYNAV
            >;
        };

// TODO:
// * Alt+tab
// * notes, music
// * play/pause, volume-up/down, record
// * K_SCROLL_UP K_SCROLL_DOWN
// * K_NEXT, K_PREV, K_SELECT
// LYNAV
// [  msg  ] [  code ] [ trmnl ] [ brwsr ] [  copy ]    [       ] [  home ] [   up  ] [  end  ] [ prscn ]
// [  esc  ] [  tab  ] [ enter ] [ bkspc ] [ paste ]    [       ] [  left ] [  down ] [ right ] [  del  ]
// [ tkmgr ] [ rfrsh ] [  bck  ] [  fwd  ] [  cut  ]    [       ] [ pgdwn ] [ LYFUN ] [  pgup ] [  lck  ]
//                               [ LYDEF ] [ space ]    [ shift ] [ LYSYM ]
//                                            ctrl        shift

        navigation_layer {
            bindings = <
            &kp C_AL_IM  &kp C_AL_TEXT_EDITOR  &kp C_AL_CONTROL_PANEL  &kp K_WWW      &kp K_COPY       &trans                &kp HOME            &kp UP     &kp END    &kp PSCRN
            &kp ESC      &kp TAB               &kp ENTER               &kp BKSP       &kp K_PASTE      &trans                &kp LEFT            &kp DOWN   &kp RIGHT  &kp DEL
            &kp QMARK    &kp K_REFRESH         &kp K_BACK              &kp K_FORWARD  &kp K_CUT        &trans                &kp PG_DN           &to LYFUN  &kp PG_UP  &kp K_LOCK
                                                                       &to LYDEF      &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &mo_sl LYNAV LYNAV
            >;
        };

// LYFUN
// TODO: M (map)
// [ esctb ] [   Q   ] [   W   ] [   E   ] [   R   ]    [   Y   ] [   U   ] [   I   ] [   O   ] [   P   ]
// [ shift ] [   A   ] [   S   ] [   D   ] [   F   ]    [   G   ] [   H   ] [   J   ] [   K   ] [   L   ]
// [  ctrl ] [   Z   ] [   X   ] [   C   ] [   B   ]    [   N   ] [   M   ] [  , <  ] [  . >  ] [  / ?  ]
//                               [   T   ] [ space ]    [       ] [ LYDEF ]
//                                   V       space
        fun_layer {
            bindings = <
            &esctb      &kp Q   &kp W   &kp E   &kp R      &kp Y   &kp U      &kp I    &kp O     &kp P
            &kp LSHIFT  &kp A   &kp S   &kp D   &kp F      &kp G   &kp H      &kp J    &kp K     &kp L
            &kp LCTRL   &kp Z   &kp X   &kp C   &kp B      &kp N   &kp M      &kp DOT  &kp CMMA  &kp SLASH
                                        &vt     &kp SPC    &trans  &to LYDEF
            >;
        };
    };
};
