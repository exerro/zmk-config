/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/rgb.h>

#define LYDEF 0
#define LYSYM 1
#define LYNAV 2
#define LYALT 3
#define LYFUN 4

&mt {
    // flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

// Please work!
// &spi1 {
//     led_strip {
//         chain-length = <7>;
//     };
// };

&led_strip {
    chain-length = <8>;
};

/ {
    behaviours {
        mo_sl: behaviour_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "ctrl_nav";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };

        kp_sk: behaviour_mp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "ctrl_nav";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
        };

        dlrpnd: dollar_pound {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_POUND";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp POUND>;
            mods = <(MOD_LSFT)>;
        };

        eqper: equals_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_PERCENT";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PRCNT>;
            mods = <(MOD_LSFT)>;
        };

        qstexcl: question_mark_exclamation_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_MARK_EXCLAMATION_MARK";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT)>;
        };

        hshat: hash_at {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_AT";
            #binding-cells = <0>;
            bindings = <&kp NUHS>, <&kp AT>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_escape {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp ESC>;
        };

        combo_escape {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp BKSP>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
        };
        
        combo_backspace {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp RET>;
        }
    };

    keymap {
        compatible = "zmk,keymap";

// LYDEF
// [   Q   ] [   W   ] [   F   ] [   P   esc   B   ]    [   J   bsp   L   ] [   U   ] [   Y   ] [   _   ]
// [   A   ] [   R   ] [   S   ] [   T   tab   G   ]    [   M   ret   N   ] [   E   ] [   I   ] [   O   ]
// [   Z   ] [   X   ] [   C   ] [   D   ] [   V   ]    [   K   ] [   H   ] [   ,   ] [   .   ] [   ;   ]
//                               [ LYNAV ] [ SPACE ]    [ shift ] [ LYSYM ]
//                                            ctrl        shift

        default_layer {
            bindings = <
            &kp Q  &kp W  &kp F  &kp P               &kp B            &kp J                 &kp L               &kp U     &kp Y    &kp UNDER
            &kp A  &kp R  &kp S  &kp T               &kp G            &kp M                 &kp N               &kp E     &kp I    &kp O
            &kp Z  &kp X  &kp C  &kp D               &kp V            &kp K                 &kp H               &kp CMMA  &kp DOT  &kp SCLN
                                 &mo_sl LYNAV LYNAV  &mt LCTRL SPC    &kp_sk LSHIFT LSHIFT  &mo_sl LYSYM LYSYM
            >;
        };

// LYSYM (WIP)
// [   &   ] [   `   ] [  = %  ] [   [   esc   ]   ]    [   +   bsp   4   ] [   5   ] [   6   ] [   \   ]
// [  ? !  ] [   ~   ] [  ' "  ] [   (   tab   )   ]    [   -   ] [   1   ] [   2   ] [   3   ] [   /   ]
// [   ^   ] [  $ Â£  ] [  # @  ] [   {   ] [   }   ]    [   *   ] [   7   ] [   8   ] [   9   ] [   |   ]
//                               [ LYDEF ] [ SPACE ]    [   0   ] [ LYALT ]
//                                            ctrl        shift

        symbol_layer {
            bindings = <
            &kp AMPS   &kp GRAVE  &eqprcnt  &kp LBKT            &kp RBKT         &kp PLUS          &kp NUM_4        &kp NUM_5           &kp NUM_6  &kp BSLH
            &qstexcl   &kp TILDE  &kp APOS  &kp LPAR            &kp RPAR         &kp MINUS         &kp NUM_1        &kp NUM_2           &kp NUM_3  &kp FSLH
            &kp CARET  &dlrpnd    &hshat    &kp LBRC            &kp RBRC         &kp ASTRK         &kp NUM_7        &kp NUM_8           &kp NUM_9  &kp PIPE
                                            &mo_sl LYDEF LYDEF  &mt LCTLR SPC    &mt LSHIFT NUM_0  &mo_sl LYALT LYALT
            >;
        };

        // LYNAV
        navigation_layer {
            bindings = <
            &kp N  &kp ATSN   &kp HASH  &kp DLLR  &kp PRCT    &kp CRRT   &kp AMPS      &kp KMLT  &kp LPRN  &kp RPRN
            &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN    &kp MINUS  &kp KP_EQUAL  &kp LBRC  &kp RBRC  &kp BKSP
            &kp LSFT  &kp KPLS   &kp LBKT  &kp RBKT  &kp BSLH    &kp UNDER  &kp LEFT      &kp DOWN  &kp UP    &kp RIGHT
                                           &to LYDEF     &kp LCTL    &kp SPC    &mo 2
            >;
        };

        // LYALT
        alt_layer {
            bindings = <
            &kp A  &kp ATSN   &kp HASH  &kp DLLR  &kp PRCT    &kp CRRT   &kp AMPS      &kp KMLT  &kp LPRN  &kp RPRN
            &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN    &kp MINUS  &kp KP_EQUAL  &kp LBRC  &kp RBRC  &kp BKSP
            &kp LSFT  &kp KPLS   &kp LBKT  &kp RBKT  &kp BSLH    &kp UNDER  &kp LEFT      &kp DOWN  &kp UP    &kp RIGHT
                                           &to LYDEF     &kp LCTL    &kp SPC    &mo 2
            >;
        };

        // LYFUN
        fun_layer {
            bindings = <
            &kp F  &kp ATSN   &kp HASH  &kp DLLR  &kp PRCT    &kp CRRT   &kp AMPS      &kp KMLT  &kp LPRN  &kp RPRN
            &kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN    &kp MINUS  &kp KP_EQUAL  &kp LBRC  &kp RBRC  &kp BKSP
            &kp LSFT  &kp KPLS   &kp LBKT  &kp RBKT  &kp BSLH    &kp UNDER  &kp LEFT      &kp DOWN  &kp UP    &kp RIGHT
                                           &mo 3     &kp LCTL    &kp SPC    &mo 2
            >;
        };
    };
};
